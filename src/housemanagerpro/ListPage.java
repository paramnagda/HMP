/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package housemanagerpro;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JCheckBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author param
 */
public final class ListPage extends javax.swing.JFrame {

    /**
     * Creates new form ListPage
     */
    static String USERNAME= "root";
    static String PASSWORD= "";
    static String CONN_STRING ="jdbc:mysql://localhost:3306/ourdb?zeroDateTimeBehavior=convertToNull";
    static Connection conn= null;
    static PreparedStatement pst =null;
    static ResultSet rs=null;
    static ArrayList<Student> students=new ArrayList<Student>();
    static ArrayList<Student> participants= new ArrayList<Student>();
    boolean flag=false;
    Student s= new Student();
    Student s2=new Student();
    int rowindex=-1;
    
    public static void MySQL()
    {
        try
        {
            conn = DriverManager.getConnection(CONN_STRING,USERNAME,PASSWORD);
            System.out.println("connection successful!");
        } 
        catch (SQLException e)
        {
            System.out.println("error!");
        }
    }
    
    public void getStudentsList()
    {
       try 
       {
           pst=conn.prepareStatement("SELECT * FROM students");
           rs=pst.executeQuery();
           Student student;
           while(rs.next())
           {
                student = new Student(rs.getString("Name"),rs.getString("Gender"),rs.getString("Grade"),rs.getString("Section"),rs.getString("DOB"),rs.getString("EmailID"),rs.getString("Phone"));
                students.add(student);
           }

       } 
       catch (Exception e) 
       {
           System.out.println("error accessing database");
       }
    }
    
    public final void Display()
    {
        sortStudents();
        DefaultTableModel model= (DefaultTableModel)Table_Database.getModel();
        int noOfRows=Table_Database.getRowCount();
        if(noOfRows!=0)
        {
            for(int i=(noOfRows-1); i>=0; i--)
                model.removeRow(i);
        }
        Object [] row= new Object[6];
        for(int i=0; i<students.size();i++)
        {
            row[0]=students.get(i).Name;
            row[1]=students.get(i).Gender;
            row[2]=students.get(i).Grade;
            row[3]=students.get(i).Section;
            row[4]=students.get(i).DOB;  
            row[5]=students.get(i).Email;
            model.addRow(row);
        }
        
    }

    public ListPage() {
        initComponents();
        MySQL();
        getStudentsList();
        Display();
        System.out.println("Displayed");
    }
    
    public ListPage(String listname)
    {
        initComponents();
        Label_ListName.setText(listname);
        MySQL();
        getStudentsList();
        Display();
        System.out.println("Displayed");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table_Database = new javax.swing.JTable();
        Label_ListName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        TextField_CurrentStudent = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Button_Add = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        Button_SaveAndEmail = new javax.swing.JButton();
        Button_Back = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table_Participants = new javax.swing.JTable();
        Button_Remove = new javax.swing.JButton();

        jButton4.setText("jButton4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        Table_Database.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Table_Database.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Gender", "Grade", "Section", "DOB", "EmailID"
            }
        ));
        Table_Database.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_DatabaseMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Table_Database);
        if (Table_Database.getColumnModel().getColumnCount() > 0) {
            Table_Database.getColumnModel().getColumn(1).setPreferredWidth(30);
            Table_Database.getColumnModel().getColumn(2).setPreferredWidth(30);
            Table_Database.getColumnModel().getColumn(3).setPreferredWidth(30);
            Table_Database.getColumnModel().getColumn(5).setMinWidth(0);
            Table_Database.getColumnModel().getColumn(5).setPreferredWidth(0);
            Table_Database.getColumnModel().getColumn(5).setMaxWidth(0);
        }

        Label_ListName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Label_ListName.setText("LIST NAME");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Select students that you'd like to add the Participant List:");

        TextField_CurrentStudent.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        TextField_CurrentStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextField_CurrentStudentActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel3.setText("Student Selected:");

        Button_Add.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Button_Add.setText("ADD");
        Button_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_AddActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel4.setText("Participant List:");

        Button_SaveAndEmail.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Button_SaveAndEmail.setText("SAVE AND EMAIL LIST");
        Button_SaveAndEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_SaveAndEmailActionPerformed(evt);
            }
        });

        Button_Back.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Button_Back.setText("<BACK");
        Button_Back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_BackActionPerformed(evt);
            }
        });

        Table_Participants.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        Table_Participants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Gender", "Grade", "Section", "DOB", "Age Category", "EmailID"
            }
        ));
        Table_Participants.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Table_ParticipantsMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Table_Participants);
        if (Table_Participants.getColumnModel().getColumnCount() > 0) {
            Table_Participants.getColumnModel().getColumn(1).setPreferredWidth(25);
            Table_Participants.getColumnModel().getColumn(2).setPreferredWidth(25);
            Table_Participants.getColumnModel().getColumn(3).setPreferredWidth(25);
            Table_Participants.getColumnModel().getColumn(4).setPreferredWidth(40);
            Table_Participants.getColumnModel().getColumn(5).setPreferredWidth(46);
            Table_Participants.getColumnModel().getColumn(6).setMinWidth(0);
            Table_Participants.getColumnModel().getColumn(6).setPreferredWidth(0);
            Table_Participants.getColumnModel().getColumn(6).setMaxWidth(0);
        }

        Button_Remove.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        Button_Remove.setText("REMOVE STUDENT");
        Button_Remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Button_RemoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(Button_Back)
                        .addGap(403, 403, 403)
                        .addComponent(Label_ListName)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TextField_CurrentStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(Button_Add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(Button_Remove, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(Button_SaveAndEmail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE))
                        .addContainerGap(66, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Label_ListName)
                    .addComponent(Button_Back))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(TextField_CurrentStudent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Button_Add)
                    .addComponent(Button_Remove)
                    .addComponent(Button_SaveAndEmail))
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextField_CurrentStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextField_CurrentStudentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextField_CurrentStudentActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void Button_SaveAndEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_SaveAndEmailActionPerformed
        boolean email;
        JCheckBox checkbox = new JCheckBox("Send a copy of this list to the Core Council");
        String message = "Are you sure you want to Save this list?\n\nClicking 'Yes' will save your list on your Computer and you will return to the House Manager Pro home page.\nYou will not be able to access this list through House Manager Pro again.\n\nTo continue working on your list, click 'No'.\n\n";
        Object[] params = {message, checkbox};
        int choice = JOptionPane.showConfirmDialog(null, params, "Confirm Action", JOptionPane.YES_NO_OPTION);
        if(choice==JOptionPane.YES_OPTION)
        {
            this.dispose();
            students=new ArrayList<Student>();
            participants=new ArrayList<Student>();
            OverviewPage overview= new OverviewPage();
            overview.setVisible(true);
            
            email = checkbox.isSelected();
            String fileaddress="D:\\House Manager Pro Lists\\"+Label_ListName.getText()+".xls";
            toExcel(Table_Participants, new File(fileaddress));
            System.out.println("File has been made");
            
            if(email)
            {
                EmailSender.emailToCore(fileaddress, Label_ListName.getText());
                JOptionPane.showMessageDialog(null,"The required list has been created and the corresponding excel sheet has been saved onto the Computer.\nThe sheet can be found at the following file path:\n"+fileaddress+"\n\nA copy of the excel sheet was also sent to the Core Council.", "List Saved and Emailed", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Email Sent to Core Council");
            }
            else
            {
                JOptionPane.showMessageDialog(null,"The required list has been created and the corresponding excel sheet has been saved onto the Computer.\nThe sheet can be found at the following file path:\n"+fileaddress, "List Saved", JOptionPane.INFORMATION_MESSAGE);
            }
            
        }
        else
        {
            return;
        }
    }//GEN-LAST:event_Button_SaveAndEmailActionPerformed

    private void Button_BackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_BackActionPerformed
        int okOrCancel=JOptionPane.showConfirmDialog(null, "Are you sure you want to return to the Home Page? \nYou will lose all your data from the current list.", "Confirm Return", JOptionPane.OK_CANCEL_OPTION);
        if(okOrCancel==0)
        {
            this.dispose();
            students=new ArrayList<Student>();
            participants=new ArrayList<Student>();
            OverviewPage overview= new OverviewPage();
            overview.setVisible(true);
        }
    }//GEN-LAST:event_Button_BackActionPerformed

    private void Table_DatabaseMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_DatabaseMouseClicked
        DefaultTableModel model=(DefaultTableModel) Table_Database.getModel();
        rowindex=Table_Database.getSelectedRow();
        s.Name=model.getValueAt(rowindex, 0).toString();
        s.Gender=model.getValueAt(rowindex, 1).toString();
        s.Grade=model.getValueAt(rowindex, 2).toString();
        s.Section=model.getValueAt(rowindex, 3).toString();
        s.DOB=model.getValueAt(rowindex, 4).toString();
        s.Email=model.getValueAt(rowindex,5).toString();
        TextField_CurrentStudent.setText(s.Name);
        flag=true;
        
    }//GEN-LAST:event_Table_DatabaseMouseClicked

    private void Button_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_AddActionPerformed
        if(flag)
        {
            participants.add(s);
            for(int i=0; i<students.size();i++)
            {
                if(students.get(i).Email.equals(s.Email))
                {
                    students.remove(i);
                    break;
                }
            }
            SortParticipants();
            refreshParticipantsTable();
            Display();
            
            
            flag=false;
            s=new Student();
            TextField_CurrentStudent.setText("");
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No student selected.\nPlease select a student from the Database and try again.", "No student selected", JOptionPane.ERROR_MESSAGE);
        }
                
    }//GEN-LAST:event_Button_AddActionPerformed

    private void Table_ParticipantsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Table_ParticipantsMouseClicked
        DefaultTableModel model=(DefaultTableModel) Table_Participants.getModel();
        rowindex=Table_Participants.getSelectedRow();
        s2.Name=model.getValueAt(rowindex,0).toString();
        for(int i=0; i<participants.size();i++)
        {
            if(s2.Name.equals(participants.get(i).Name))
            {
                s2.Gender=participants.get(i).Gender;
                s2.Grade=participants.get(i).Grade;
                s2.Section=participants.get(i).Section;
                s2.DOB=participants.get(i).DOB;
                s2.Email=participants.get(i).Email;
            }
        }
        
    }//GEN-LAST:event_Table_ParticipantsMouseClicked

    private void Button_RemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_RemoveActionPerformed
        boolean category=true;
        if(!s2.Name.equals(""))
        {
            for(int i=0; i<participants.size();i++)
            {
                if(s2.Name.equals(participants.get(i).Name))
                {
                    participants.remove(i);
                    category=false;
                    break;
                }
            }
            
            if(category)
            {
                JOptionPane.showMessageDialog(null, "Invalid student selected.\nPlease select a valid student that you would like to remove from the list and try again.", "No student selected", JOptionPane.ERROR_MESSAGE);
                return;
            }
            students.add(s2);
            Display();
            refreshParticipantsTable();
            s2=new Student();
            
        }
        else
        {
            JOptionPane.showMessageDialog(null, "No student selected.\nPlease select a student that you would like to remove from the list and try again.", "No student selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_Button_RemoveActionPerformed

    public void toExcel(JTable table, File file){
    try{
        TableModel model = table.getModel();
        FileWriter excel = new FileWriter(file);

        for(int i = 0; i < model.getColumnCount()-1; i++){
            excel.write(model.getColumnName(i) + "\t");
        }

        excel.write("\n");

        for(int i=0; i< model.getRowCount(); i++) {
            for(int j=0; j < model.getColumnCount()-1; j++) {
                excel.write(model.getValueAt(i,j).toString()+"\t");
            }
            excel.write("\n");
        }

        excel.close();
        System.out.println("file written");

    }
    catch(IOException e){ 
        System.out.println(e); 
    }
}
   
    public void refreshParticipantsTable()
    {
        boolean first=true;
        DefaultTableModel model=(DefaultTableModel) Table_Participants.getModel();
        int noOfRows=model.getRowCount();
        if(noOfRows!=0)
        {
            for(int i=(noOfRows-1); i>=0; i--)
                model.removeRow(i);
        }
        String currentcategory="-1";
        for(int i =0; i <participants.size(); i++)
        {
            if(!currentcategory.equals(DetermineAgeCategory(i)))
            {
                if(first)
                {
                    first=false;
                }
                else
                {
                    Object [] emptyrow={"","","","","","",""};
                    model.addRow(emptyrow);
                }
                currentcategory=DetermineAgeCategory(i);
                Object [] categoryrow={currentcategory,currentcategory,currentcategory,currentcategory,currentcategory,currentcategory, currentcategory};
                model.addRow(categoryrow);
                Object[] row = {participants.get(i).Name, participants.get(i).Gender, participants.get(i).Grade, participants.get(i).Section, participants.get(i).DOB, DetermineAgeCategory(i), participants.get(i).Email};
                model.addRow(row);
            }
            else
            {
                Object[] row = {participants.get(i).Name, participants.get(i).Gender, participants.get(i).Grade, participants.get(i).Section, participants.get(i).DOB, DetermineAgeCategory(i), participants.get(i).Email};
                model.addRow(row);
            }
        }
    }
    
    public void setListName(String name)
    {
        Label_ListName.setText(name);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListPage().setVisible(true);
            }
        });
    }
    
    public void sortStudents()
    {
        if(students.isEmpty() || students.size()==1)
        {
            return;
        }
        else
        {
            for(int i=0;i<students.size();i++)
            {
                for(int j=0; j<(students.size()-i-1);j++)
                {
                    if(Integer.parseInt(students.get(j).Grade)<Integer.parseInt(students.get(j+1).Grade))
                    {
                        String tempName=students.get(j).Name;
                        String tempGender=students.get(j).Gender;
                        String tempGrade=students.get(j).Grade;
                        String tempSection=students.get(j).Section;
                        String tempDOB=students.get(j).DOB;
                        String tempEmail=students.get(j).Email;
                        String tempPhone=students.get(j).Phone;
                        students.get(j).Name=students.get(j+1).Name;
                        students.get(j).Gender=students.get(j+1).Gender;
                        students.get(j).Grade=students.get(j+1).Grade;
                        students.get(j).Section=students.get(j+1).Section;
                        students.get(j).DOB=students.get(j+1).DOB; 
                        students.get(j).Email=students.get(j+1).Email;
                        students.get(j).Phone=students.get(j+1).Phone; 
                        students.get(j+1).Name=tempName;
                        students.get(j+1).Gender=tempGender;
                        students.get(j+1).Grade=tempGrade;
                        students.get(j+1).Section=tempSection;
                        students.get(j+1).DOB=tempDOB; 
                        students.get(j+1).Email=tempEmail; 
                        students.get(j+1).Phone=tempPhone; 
                    }
                }
            }
        }
    }
    
    
    public void SortParticipants() 
    {
        if(participants.size()==1 )
        {
            return;
        }
        for(int i=0; i<participants.size(); i++)
        {
            for (int j = 0; j < participants.size()-i-1; j++) 
            {
                if (DetermineAgeCategory(j).compareTo(DetermineAgeCategory(j+1))>0)
                {
                    String tempName=participants.get(j).Name;
                    String tempGender=participants.get(j).Gender;
                    String tempGrade=participants.get(j).Grade;
                    String tempSection=participants.get(j).Section;
                    String tempDOB=participants.get(j).DOB;
                    String tempEmail=participants.get(j).Email;
                    String tempPhone=participants.get(j).Phone;
                    participants.get(j).Name=participants.get(j+1).Name;
                    participants.get(j).Gender=participants.get(j+1).Gender;
                    participants.get(j).Grade=participants.get(j+1).Grade;
                    participants.get(j).Section=participants.get(j+1).Section;
                    participants.get(j).DOB=participants.get(j+1).DOB; 
                    participants.get(j).Email=participants.get(j+1).Email;
                    participants.get(j+1).Name=tempName;
                    participants.get(j+1).Gender=tempGender;
                    participants.get(j+1).Grade=tempGrade;
                    participants.get(j+1).Section=tempSection;
                    participants.get(j+1).DOB=tempDOB;
                    participants.get(j+1).Email=tempEmail;
                    participants.get(j+1).Phone=tempPhone;
                }
            }
        }
        
    }

    public String DetermineAgeCategory(int x) {
        String ageCategory="-1";
        if(participants.get(x).DOB.endsWith("2007")||participants.get(x).DOB.endsWith("2008"))
        {
            ageCategory="12";
        }
        else if(participants.get(x).DOB.endsWith("2005")||participants.get(x).DOB.endsWith("2006"))
        {
            ageCategory="14";
        }
        else if(participants.get(x).DOB.endsWith("2003")||participants.get(x).DOB.endsWith("2004"))
        {
            ageCategory="16";
        }
        else if(participants.get(x).DOB.endsWith("2000")||participants.get(x).DOB.endsWith("2001")||participants.get(x).DOB.endsWith("2002"))
        {
            ageCategory="19";
        }
        if(participants.get(x).Gender.equals("F"))
        {
            ageCategory="Girls U"+ageCategory;
        }
        else
        {
            ageCategory="Boys U"+ageCategory;
        }
        return ageCategory;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_Add;
    private javax.swing.JButton Button_Back;
    private javax.swing.JButton Button_Remove;
    private javax.swing.JButton Button_SaveAndEmail;
    private javax.swing.JLabel Label_ListName;
    private javax.swing.JTable Table_Database;
    private javax.swing.JTable Table_Participants;
    private javax.swing.JTextField TextField_CurrentStudent;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
